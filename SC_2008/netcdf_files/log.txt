netcdf ocean_his {
dimensions:
	xi_rho = 472 ;
	xi_u = 471 ;
	xi_v = 472 ;
	xi_psi = 471 ;
	eta_rho = 352 ;
	eta_u = 352 ;
	eta_v = 351 ;
	eta_psi = 351 ;
	N = 30 ;
	s_rho = 30 ;
	s_w = 31 ;
	tracer = 2 ;
	boundary = 4 ;
	ocean_time = UNLIMITED ; // (2065 currently)
variables:
	int ntimes ;
		ntimes:long_name = "number of long time-steps" ;
	int ndtfast ;
		ndtfast:long_name = "number of short time-steps" ;
	double dt ;
		dt:long_name = "size of long time-steps" ;
		dt:units = "second" ;
	double dtfast ;
		dtfast:long_name = "size of short time-steps" ;
		dtfast:units = "second" ;
	double dstart ;
		dstart:long_name = "time stamp assigned to model initilization" ;
		dstart:units = "days since 1948-01-01 00:00:00" ;
		dstart:calendar = "proleptic_gregorian" ;
	int nHIS ;
		nHIS:long_name = "number of time-steps between history records" ;
	int ndefHIS ;
		ndefHIS:long_name = "number of time-steps between the creation of history files" ;
	int nRST ;
		nRST:long_name = "number of time-steps between restart records" ;
		nRST:cycle = "only latest two records are maintained" ;
	int ntsAVG ;
		ntsAVG:long_name = "starting time-step for accumulation of time-averaged fields" ;
	int nAVG ;
		nAVG:long_name = "number of time-steps between time-averaged records" ;
	int ndefAVG ;
		ndefAVG:long_name = "number of time-steps between the creation of average files" ;
	int ntsDIA ;
		ntsDIA:long_name = "starting time-step for accumulation of diagnostic fields" ;
	int nDIA ;
		nDIA:long_name = "number of time-steps between diagnostic records" ;
	int ndefDIA ;
		ndefDIA:long_name = "number of time-steps between the creation of diagnostic files" ;
	double Falpha ;
		Falpha:long_name = "Power-law shape barotropic filter parameter" ;
	double Fbeta ;
		Fbeta:long_name = "Power-law shape barotropic filter parameter" ;
	double Fgamma ;
		Fgamma:long_name = "Power-law shape barotropic filter parameter" ;
	double nl_tnu2(tracer) ;
		nl_tnu2:long_name = "nonlinear model Laplacian mixing coefficient for tracers" ;
		nl_tnu2:units = "meter2 second-1" ;
	double nl_visc2 ;
		nl_visc2:long_name = "nonlinear model Laplacian mixing coefficient for momentum" ;
		nl_visc2:units = "meter2 second-1" ;
	int LuvSponge ;
		LuvSponge:long_name = "horizontal viscosity sponge activation switch" ;
		LuvSponge:flag_values = 0, 1 ;
		LuvSponge:flag_meanings = ".FALSE. .TRUE." ;
	int LtracerSponge(tracer) ;
		LtracerSponge:long_name = "horizontal diffusivity sponge activation switch" ;
		LtracerSponge:flag_values = 0, 1 ;
		LtracerSponge:flag_meanings = ".FALSE. .TRUE." ;
	double Akt_bak(tracer) ;
		Akt_bak:long_name = "background vertical mixing coefficient for tracers" ;
		Akt_bak:units = "meter2 second-1" ;
	double Akv_bak ;
		Akv_bak:long_name = "background vertical mixing coefficient for momentum" ;
		Akv_bak:units = "meter2 second-1" ;
	double Akk_bak ;
		Akk_bak:long_name = "background vertical mixing coefficient for turbulent energy" ;
		Akk_bak:units = "meter2 second-1" ;
	double Akp_bak ;
		Akp_bak:long_name = "background vertical mixing coefficient for length scale" ;
		Akp_bak:units = "meter2 second-1" ;
	double rdrg ;
		rdrg:long_name = "linear drag coefficient" ;
		rdrg:units = "meter second-1" ;
	double rdrg2 ;
		rdrg2:long_name = "quadratic drag coefficient" ;
	double Zob ;
		Zob:long_name = "bottom roughness" ;
		Zob:units = "meter" ;
	double Zos ;
		Zos:long_name = "surface roughness" ;
		Zos:units = "meter" ;
	double gls_p ;
		gls_p:long_name = "stability exponent" ;
	double gls_m ;
		gls_m:long_name = "turbulent kinetic energy exponent" ;
	double gls_n ;
		gls_n:long_name = "turbulent length scale exponent" ;
	double gls_cmu0 ;
		gls_cmu0:long_name = "stability coefficient" ;
	double gls_c1 ;
		gls_c1:long_name = "shear production coefficient" ;
	double gls_c2 ;
		gls_c2:long_name = "dissipation coefficient" ;
	double gls_c3m ;
		gls_c3m:long_name = "buoyancy production coefficient (minus)" ;
	double gls_c3p ;
		gls_c3p:long_name = "buoyancy production coefficient (plus)" ;
	double gls_sigk ;
		gls_sigk:long_name = "constant Schmidt number for TKE" ;
	double gls_sigp ;
		gls_sigp:long_name = "constant Schmidt number for PSI" ;
	double gls_Kmin ;
		gls_Kmin:long_name = "minimum value of specific turbulent kinetic energy" ;
	double gls_Pmin ;
		gls_Pmin:long_name = "minimum Value of dissipation" ;
	double Charnok_alpha ;
		Charnok_alpha:long_name = "Charnok factor for surface roughness" ;
	double Zos_hsig_alpha ;
		Zos_hsig_alpha:long_name = "wave amplitude factor for surface roughness" ;
	double sz_alpha ;
		sz_alpha:long_name = "surface flux from wave dissipation" ;
	double CrgBan_cw ;
		CrgBan_cw:long_name = "surface flux due to Craig and Banner wave breaking" ;
	double Znudg ;
		Znudg:long_name = "free-surface nudging/relaxation inverse time scale" ;
		Znudg:units = "day-1" ;
	double M2nudg ;
		M2nudg:long_name = "2D momentum nudging/relaxation inverse time scale" ;
		M2nudg:units = "day-1" ;
	double M3nudg ;
		M3nudg:long_name = "3D momentum nudging/relaxation inverse time scale" ;
		M3nudg:units = "day-1" ;
	double Tnudg(tracer) ;
		Tnudg:long_name = "Tracers nudging/relaxation inverse time scale" ;
		Tnudg:units = "day-1" ;
	double Tnudg_SSS ;
		Tnudg_SSS:long_name = "SSS nudging/relaxation inverse time scale" ;
		Tnudg_SSS:units = "day-1" ;
	double FSobc_in(boundary) ;
		FSobc_in:long_name = "free-surface inflow, nudging inverse time scale" ;
		FSobc_in:units = "second-1" ;
	double FSobc_out(boundary) ;
		FSobc_out:long_name = "free-surface outflow, nudging inverse time scale" ;
		FSobc_out:units = "second-1" ;
	double M2obc_in(boundary) ;
		M2obc_in:long_name = "2D momentum inflow, nudging inverse time scale" ;
		M2obc_in:units = "second-1" ;
	double M2obc_out(boundary) ;
		M2obc_out:long_name = "2D momentum outflow, nudging inverse time scale" ;
		M2obc_out:units = "second-1" ;
	double Tobc_in(boundary, tracer) ;
		Tobc_in:long_name = "tracers inflow, nudging inverse time scale" ;
		Tobc_in:units = "second-1" ;
	double Tobc_out(boundary, tracer) ;
		Tobc_out:long_name = "tracers outflow, nudging inverse time scale" ;
		Tobc_out:units = "second-1" ;
	double M3obc_in(boundary) ;
		M3obc_in:long_name = "3D momentum inflow, nudging inverse time scale" ;
		M3obc_in:units = "second-1" ;
	double M3obc_out(boundary) ;
		M3obc_out:long_name = "3D momentum outflow, nudging inverse time scale" ;
		M3obc_out:units = "second-1" ;
	double rho0 ;
		rho0:long_name = "mean density used in Boussinesq approximation" ;
		rho0:units = "kilogram meter-3" ;
	double gamma2 ;
		gamma2:long_name = "slipperiness parameter" ;
	int LuvSrc ;
		LuvSrc:long_name = "momentum point sources and sink activation switch" ;
		LuvSrc:flag_values = 0, 1 ;
		LuvSrc:flag_meanings = ".FALSE. .TRUE." ;
	int LwSrc ;
		LwSrc:long_name = "mass point sources and sink activation switch" ;
		LwSrc:flag_values = 0, 1 ;
		LwSrc:flag_meanings = ".FALSE. .TRUE." ;
	int LtracerSrc(tracer) ;
		LtracerSrc:long_name = "tracer point sources and sink activation switch" ;
		LtracerSrc:flag_values = 0, 1 ;
		LtracerSrc:flag_meanings = ".FALSE. .TRUE." ;
	int LsshCLM ;
		LsshCLM:long_name = "sea surface height climatology processing switch" ;
		LsshCLM:flag_values = 0, 1 ;
		LsshCLM:flag_meanings = ".FALSE. .TRUE." ;
	int Lm2CLM ;
		Lm2CLM:long_name = "2D momentum climatology processing switch" ;
		Lm2CLM:flag_values = 0, 1 ;
		Lm2CLM:flag_meanings = ".FALSE. .TRUE." ;
	int Lm3CLM ;
		Lm3CLM:long_name = "3D momentum climatology processing switch" ;
		Lm3CLM:flag_values = 0, 1 ;
		Lm3CLM:flag_meanings = ".FALSE. .TRUE." ;
	int LtracerCLM(tracer) ;
		LtracerCLM:long_name = "tracer climatology processing switch" ;
		LtracerCLM:flag_values = 0, 1 ;
		LtracerCLM:flag_meanings = ".FALSE. .TRUE." ;
	int LnudgeM2CLM ;
		LnudgeM2CLM:long_name = "2D momentum climatology nudging activation switch" ;
		LnudgeM2CLM:flag_values = 0, 1 ;
		LnudgeM2CLM:flag_meanings = ".FALSE. .TRUE." ;
	int LnudgeM3CLM ;
		LnudgeM3CLM:long_name = "3D momentum climatology nudging activation switch" ;
		LnudgeM3CLM:flag_values = 0, 1 ;
		LnudgeM3CLM:flag_meanings = ".FALSE. .TRUE." ;
	int LnudgeTCLM(tracer) ;
		LnudgeTCLM:long_name = "tracer climatology nudging activation switch" ;
		LnudgeTCLM:flag_values = 0, 1 ;
		LnudgeTCLM:flag_meanings = ".FALSE. .TRUE." ;
	int spherical ;
		spherical:long_name = "grid type logical switch" ;
		spherical:flag_values = 0, 1 ;
		spherical:flag_meanings = "Cartesian spherical" ;
	double xl ;
		xl:long_name = "domain length in the XI-direction" ;
		xl:units = "meter" ;
	double el ;
		el:long_name = "domain length in the ETA-direction" ;
		el:units = "meter" ;
	int Vtransform ;
		Vtransform:long_name = "vertical terrain-following transformation equation" ;
	int Vstretching ;
		Vstretching:long_name = "vertical terrain-following stretching function" ;
	double theta_s ;
		theta_s:long_name = "S-coordinate surface control parameter" ;
	double theta_b ;
		theta_b:long_name = "S-coordinate bottom control parameter" ;
	double Tcline ;
		Tcline:long_name = "S-coordinate surface/bottom layer width" ;
		Tcline:units = "meter" ;
	double hc ;
		hc:long_name = "S-coordinate parameter, critical depth" ;
		hc:units = "meter" ;
	int grid ;
		grid:cf_role = "grid_topology" ;
		grid:topology_dimension = 2 ;
		grid:node_dimensions = "xi_psi eta_psi" ;
		grid:face_dimensions = "xi_rho: xi_psi (padding: both) eta_rho: eta_psi (padding: both)" ;
		grid:edge1_dimensions = "xi_u: xi_psi eta_u: eta_psi (padding: both)" ;
		grid:edge2_dimensions = "xi_v: xi_psi (padding: both) eta_v: eta_psi" ;
		grid:node_coordinates = "lon_psi lat_psi" ;
		grid:face_coordinates = "lon_rho lat_rho" ;
		grid:edge1_coordinates = "lon_u lat_u" ;
		grid:edge2_coordinates = "lon_v lat_v" ;
		grid:vertical_dimensions = "s_rho: s_w (padding: none)" ;
	double s_rho(s_rho) ;
		s_rho:long_name = "S-coordinate at RHO-points" ;
		s_rho:valid_min = -1. ;
		s_rho:valid_max = 0. ;
		s_rho:positive = "up" ;
		s_rho:standard_name = "ocean_s_coordinate_g2" ;
		s_rho:formula_terms = "s: s_rho C: Cs_r eta: zeta depth: h depth_c: hc" ;
		s_rho:field = "s_rho, scalar" ;
	double s_w(s_w) ;
		s_w:long_name = "S-coordinate at W-points" ;
		s_w:valid_min = -1. ;
		s_w:valid_max = 0. ;
		s_w:positive = "up" ;
		s_w:standard_name = "ocean_s_coordinate_g2" ;
		s_w:formula_terms = "s: s_w C: Cs_w eta: zeta depth: h depth_c: hc" ;
		s_w:field = "s_w, scalar" ;
	double Cs_r(s_rho) ;
		Cs_r:long_name = "S-coordinate stretching curves at RHO-points" ;
		Cs_r:valid_min = -1. ;
		Cs_r:valid_max = 0. ;
		Cs_r:field = "Cs_r, scalar" ;
	double Cs_w(s_w) ;
		Cs_w:long_name = "S-coordinate stretching curves at W-points" ;
		Cs_w:valid_min = -1. ;
		Cs_w:valid_max = 0. ;
		Cs_w:field = "Cs_w, scalar" ;
	double h(eta_rho, xi_rho) ;
		h:long_name = "bathymetry at RHO-points" ;
		h:units = "meter" ;
		h:grid = "grid" ;
		h:location = "face" ;
		h:coordinates = "lon_rho lat_rho" ;
		h:field = "bath, scalar" ;
	double f(eta_rho, xi_rho) ;
		f:long_name = "Coriolis parameter at RHO-points" ;
		f:units = "second-1" ;
		f:grid = "grid" ;
		f:location = "face" ;
		f:coordinates = "lon_rho lat_rho" ;
		f:field = "coriolis, scalar" ;
	double pm(eta_rho, xi_rho) ;
		pm:long_name = "curvilinear coordinate metric in XI" ;
		pm:units = "meter-1" ;
		pm:grid = "grid" ;
		pm:location = "face" ;
		pm:coordinates = "lon_rho lat_rho" ;
		pm:field = "pm, scalar" ;
	double pn(eta_rho, xi_rho) ;
		pn:long_name = "curvilinear coordinate metric in ETA" ;
		pn:units = "meter-1" ;
		pn:grid = "grid" ;
		pn:location = "face" ;
		pn:coordinates = "lon_rho lat_rho" ;
		pn:field = "pn, scalar" ;
	double lon_rho(eta_rho, xi_rho) ;
		lon_rho:long_name = "longitude of RHO-points" ;
		lon_rho:units = "degree_east" ;
		lon_rho:standard_name = "longitude" ;
		lon_rho:field = "lon_rho, scalar" ;
	double lat_rho(eta_rho, xi_rho) ;
		lat_rho:long_name = "latitude of RHO-points" ;
		lat_rho:units = "degree_north" ;
		lat_rho:standard_name = "latitude" ;
		lat_rho:field = "lat_rho, scalar" ;
	double lon_u(eta_u, xi_u) ;
		lon_u:long_name = "longitude of U-points" ;
		lon_u:units = "degree_east" ;
		lon_u:standard_name = "longitude" ;
		lon_u:field = "lon_u, scalar" ;
	double lat_u(eta_u, xi_u) ;
		lat_u:long_name = "latitude of U-points" ;
		lat_u:units = "degree_north" ;
		lat_u:standard_name = "latitude" ;
		lat_u:field = "lat_u, scalar" ;
	double lon_v(eta_v, xi_v) ;
		lon_v:long_name = "longitude of V-points" ;
		lon_v:units = "degree_east" ;
		lon_v:standard_name = "longitude" ;
		lon_v:field = "lon_v, scalar" ;
	double lat_v(eta_v, xi_v) ;
		lat_v:long_name = "latitude of V-points" ;
		lat_v:units = "degree_north" ;
		lat_v:standard_name = "latitude" ;
		lat_v:field = "lat_v, scalar" ;
	double lon_psi(eta_psi, xi_psi) ;
		lon_psi:long_name = "longitude of PSI-points" ;
		lon_psi:units = "degree_east" ;
		lon_psi:standard_name = "longitude" ;
		lon_psi:field = "lon_psi, scalar" ;
	double lat_psi(eta_psi, xi_psi) ;
		lat_psi:long_name = "latitude of PSI-points" ;
		lat_psi:units = "degree_north" ;
		lat_psi:standard_name = "latitude" ;
		lat_psi:field = "lat_psi, scalar" ;
	double angle(eta_rho, xi_rho) ;
		angle:long_name = "angle between XI-axis and EAST" ;
		angle:units = "radians" ;
		angle:grid = "grid" ;
		angle:location = "face" ;
		angle:coordinates = "lon_rho lat_rho" ;
		angle:field = "angle, scalar" ;
	double mask_rho(eta_rho, xi_rho) ;
		mask_rho:long_name = "mask on RHO-points" ;
		mask_rho:flag_values = 0., 1. ;
		mask_rho:flag_meanings = "land water" ;
		mask_rho:grid = "grid" ;
		mask_rho:location = "face" ;
		mask_rho:coordinates = "lon_rho lat_rho" ;
	double mask_u(eta_u, xi_u) ;
		mask_u:long_name = "mask on U-points" ;
		mask_u:flag_values = 0., 1. ;
		mask_u:flag_meanings = "land water" ;
		mask_u:grid = "grid" ;
		mask_u:location = "edge1" ;
		mask_u:coordinates = "lon_u lat_u" ;
	double mask_v(eta_v, xi_v) ;
		mask_v:long_name = "mask on V-points" ;
		mask_v:flag_values = 0., 1. ;
		mask_v:flag_meanings = "land water" ;
		mask_v:grid = "grid" ;
		mask_v:location = "edge2" ;
		mask_v:coordinates = "lon_v lat_v" ;
	double mask_psi(eta_psi, xi_psi) ;
		mask_psi:long_name = "mask on psi-points" ;
		mask_psi:flag_values = 0., 1. ;
		mask_psi:flag_meanings = "land water" ;
		mask_psi:grid = "grid" ;
		mask_psi:location = "node" ;
		mask_psi:coordinates = "lon_psi lat_psi" ;
	double ocean_time(ocean_time) ;
		ocean_time:long_name = "time since initialization" ;
		ocean_time:units = "seconds since 1948-01-01 00:00:00" ;
		ocean_time:calendar = "proleptic_gregorian" ;
		ocean_time:field = "time, scalar, series" ;
	float zeta(ocean_time, eta_rho, xi_rho) ;
		zeta:long_name = "free-surface" ;
		zeta:units = "meter" ;
		zeta:time = "ocean_time" ;
		zeta:grid = "grid" ;
		zeta:location = "face" ;
		zeta:coordinates = "lon_rho lat_rho ocean_time" ;
		zeta:field = "free-surface, scalar, series" ;
		zeta:_FillValue = 1.e+37f ;
	float ubar_eastward(ocean_time, eta_rho, xi_rho) ;
		ubar_eastward:long_name = "eastward vertically integrated momentum component at RHO-points" ;
		ubar_eastward:units = "meter second-1" ;
		ubar_eastward:time = "ocean_time" ;
		ubar_eastward:standard_name = "barotropic_eastward_sea_water_velocity" ;
		ubar_eastward:grid = "grid" ;
		ubar_eastward:location = "face" ;
		ubar_eastward:coordinates = "lon_rho lat_rho ocean_time" ;
		ubar_eastward:field = "ubar_eastward, scalar, series" ;
		ubar_eastward:_FillValue = 1.e+37f ;
	float vbar_northward(ocean_time, eta_rho, xi_rho) ;
		vbar_northward:long_name = "northward vertically integrated momentum component at RHO-points" ;
		vbar_northward:units = "meter second-1" ;
		vbar_northward:time = "ocean_time" ;
		vbar_northward:standard_name = "barotropic_northward_sea_water_velocity" ;
		vbar_northward:grid = "grid" ;
		vbar_northward:location = "face" ;
		vbar_northward:coordinates = "lon_rho lat_rho ocean_time" ;
		vbar_northward:field = "vbar_northward, scalar, series" ;
		vbar_northward:_FillValue = 1.e+37f ;
	float u(ocean_time, s_rho, eta_u, xi_u) ;
		u:long_name = "u-momentum component" ;
		u:units = "meter second-1" ;
		u:time = "ocean_time" ;
		u:grid = "grid" ;
		u:location = "edge1" ;
		u:coordinates = "lon_u lat_u s_rho ocean_time" ;
		u:field = "u-velocity, scalar, series" ;
		u:_FillValue = 1.e+37f ;
	float v(ocean_time, s_rho, eta_v, xi_v) ;
		v:long_name = "v-momentum component" ;
		v:units = "meter second-1" ;
		v:time = "ocean_time" ;
		v:grid = "grid" ;
		v:location = "edge2" ;
		v:coordinates = "lon_v lat_v s_rho ocean_time" ;
		v:field = "v-velocity, scalar, series" ;
		v:_FillValue = 1.e+37f ;
	float u_eastward(ocean_time, s_rho, eta_rho, xi_rho) ;
		u_eastward:long_name = "eastward momentum component at RHO-points" ;
		u_eastward:units = "meter second-1" ;
		u_eastward:time = "ocean_time" ;
		u_eastward:standard_name = "eastward_sea_water_velocity" ;
		u_eastward:grid = "grid" ;
		u_eastward:location = "face" ;
		u_eastward:coordinates = "lon_rho lat_rho s_rho ocean_time" ;
		u_eastward:field = "u_eastward, scalar, series" ;
		u_eastward:_FillValue = 1.e+37f ;
	float v_northward(ocean_time, s_rho, eta_rho, xi_rho) ;
		v_northward:long_name = "northward momentum component at RHO-points" ;
		v_northward:units = "meter second-1" ;
		v_northward:time = "ocean_time" ;
		v_northward:standard_name = "northward_sea_water_velocity" ;
		v_northward:grid = "grid" ;
		v_northward:location = "face" ;
		v_northward:coordinates = "lon_rho lat_rho s_rho ocean_time" ;
		v_northward:field = "v_northward, scalar, series" ;
		v_northward:_FillValue = 1.e+37f ;
	float w(ocean_time, s_w, eta_rho, xi_rho) ;
		w:long_name = "vertical momentum component" ;
		w:units = "meter second-1" ;
		w:time = "ocean_time" ;
		w:standard_name = "upward_sea_water_velocity" ;
		w:grid = "grid" ;
		w:location = "face" ;
		w:coordinates = "lon_rho lat_rho s_w ocean_time" ;
		w:field = "w-velocity, scalar, series" ;
		w:_FillValue = 1.e+37f ;
	float temp(ocean_time, s_rho, eta_rho, xi_rho) ;
		temp:long_name = "potential temperature" ;
		temp:units = "Celsius" ;
		temp:time = "ocean_time" ;
		temp:grid = "grid" ;
		temp:location = "face" ;
		temp:coordinates = "lon_rho lat_rho s_rho ocean_time" ;
		temp:field = "temperature, scalar, series" ;
		temp:_FillValue = 1.e+37f ;
	float salt(ocean_time, s_rho, eta_rho, xi_rho) ;
		salt:long_name = "salinity" ;
		salt:time = "ocean_time" ;
		salt:grid = "grid" ;
		salt:location = "face" ;
		salt:coordinates = "lon_rho lat_rho s_rho ocean_time" ;
		salt:field = "salinity, scalar, series" ;
		salt:_FillValue = 1.e+37f ;
	float latent(ocean_time, eta_rho, xi_rho) ;
		latent:long_name = "net latent heat flux" ;
		latent:units = "watt meter-2" ;
		latent:negative_value = "upward flux, cooling" ;
		latent:positive_value = "downward flux, heating" ;
		latent:time = "ocean_time" ;
		latent:grid = "grid" ;
		latent:location = "face" ;
		latent:coordinates = "lon_rho lat_rho ocean_time" ;
		latent:field = "latent heat flux, scalar, series" ;
		latent:_FillValue = 1.e+37f ;
	float sensible(ocean_time, eta_rho, xi_rho) ;
		sensible:long_name = "net sensible heat flux" ;
		sensible:units = "watt meter-2" ;
		sensible:negative_value = "upward flux, cooling" ;
		sensible:positive_value = "downward flux, heating" ;
		sensible:time = "ocean_time" ;
		sensible:grid = "grid" ;
		sensible:location = "face" ;
		sensible:coordinates = "lon_rho lat_rho ocean_time" ;
		sensible:field = "sensible heat flux, scalar, series" ;
		sensible:_FillValue = 1.e+37f ;
	float lwrad(ocean_time, eta_rho, xi_rho) ;
		lwrad:long_name = "net longwave radiation flux" ;
		lwrad:units = "watt meter-2" ;
		lwrad:negative_value = "upward flux, cooling" ;
		lwrad:positive_value = "downward flux, heating" ;
		lwrad:time = "ocean_time" ;
		lwrad:grid = "grid" ;
		lwrad:location = "face" ;
		lwrad:coordinates = "lon_rho lat_rho ocean_time" ;
		lwrad:field = "longwave radiation, scalar, series" ;
		lwrad:_FillValue = 1.e+37f ;
	float swrad(ocean_time, eta_rho, xi_rho) ;
		swrad:long_name = "solar shortwave radiation flux" ;
		swrad:units = "watt meter-2" ;
		swrad:negative_value = "upward flux, cooling" ;
		swrad:positive_value = "downward flux, heating" ;
		swrad:time = "ocean_time" ;
		swrad:grid = "grid" ;
		swrad:location = "face" ;
		swrad:coordinates = "lon_rho lat_rho ocean_time" ;
		swrad:field = "shortwave radiation, scalar, series" ;
		swrad:_FillValue = 1.e+37f ;
	float uice(ocean_time, eta_u, xi_u) ;
		uice:long_name = "u-component of ice velocity" ;
		uice:units = "meter second-1" ;
		uice:time = "ocean_time" ;
		uice:grid = "grid" ;
		uice:location = "edge1" ;
		uice:coordinates = "lon_u lat_u ocean_time" ;
		uice:field = "u-component of ice velocity, scalar, series" ;
		uice:_FillValue = 1.e+37f ;
	float vice(ocean_time, eta_v, xi_v) ;
		vice:long_name = "v-component of ice velocity" ;
		vice:units = "meter second-1" ;
		vice:time = "ocean_time" ;
		vice:grid = "grid" ;
		vice:location = "edge2" ;
		vice:coordinates = "lon_v lat_v ocean_time" ;
		vice:field = "v-component of ice velocity, scalar, series" ;
		vice:_FillValue = 1.e+37f ;
	float aice(ocean_time, eta_rho, xi_rho) ;
		aice:long_name = "fraction of cell covered by ice" ;
		aice:time = "ocean_time" ;
		aice:grid = "grid" ;
		aice:location = "face" ;
		aice:coordinates = "lon_rho lat_rho ocean_time" ;
		aice:field = "ice concentration, scalar, series" ;
		aice:_FillValue = 1.e+37f ;
	float hice(ocean_time, eta_rho, xi_rho) ;
		hice:long_name = "average ice thickness in cell" ;
		hice:units = "meter" ;
		hice:time = "ocean_time" ;
		hice:grid = "grid" ;
		hice:location = "face" ;
		hice:coordinates = "lon_rho lat_rho ocean_time" ;
		hice:field = "ice thickness, scalar, series" ;
		hice:_FillValue = 1.e+37f ;
	float tisrf(ocean_time, eta_rho, xi_rho) ;
		tisrf:long_name = "temperature of ice surface" ;
		tisrf:units = "degrees Celcius" ;
		tisrf:time = "ocean_time" ;
		tisrf:grid = "grid" ;
		tisrf:location = "face" ;
		tisrf:coordinates = "lon_rho lat_rho ocean_time" ;
		tisrf:field = "surface temperature, scalar, series" ;
		tisrf:_FillValue = 1.e+37f ;
	float snow_thick(ocean_time, eta_rho, xi_rho) ;
		snow_thick:long_name = "thickness of snow cover" ;
		snow_thick:units = "meter" ;
		snow_thick:time = "ocean_time" ;
		snow_thick:grid = "grid" ;
		snow_thick:location = "face" ;
		snow_thick:coordinates = "lon_rho lat_rho ocean_time" ;
		snow_thick:field = "snow thickness, scalar, series" ;
		snow_thick:_FillValue = 1.e+37f ;
	float ageice(ocean_time, eta_rho, xi_rho) ;
		ageice:long_name = "age of the ice" ;
		ageice:units = "sec" ;
		ageice:time = "ocean_time" ;
		ageice:grid = "grid" ;
		ageice:location = "face" ;
		ageice:coordinates = "lon_rho lat_rho ocean_time" ;
		ageice:field = "ice age, scalar, series" ;
		ageice:_FillValue = 1.e+37f ;
	float iomflx(ocean_time, eta_rho, xi_rho) ;
		iomflx:long_name = "ice-ocean mass flux" ;
		iomflx:units = "meter second-1" ;
		iomflx:time = "ocean_time" ;
		iomflx:grid = "grid" ;
		iomflx:location = "face" ;
		iomflx:coordinates = "lon_rho lat_rho ocean_time" ;
		iomflx:field = "ice-ocean mass flux, scalar, series" ;
		iomflx:_FillValue = 1.e+37f ;
	float ti(ocean_time, eta_rho, xi_rho) ;
		ti:long_name = "interior ice temperature" ;
		ti:units = "degrees Celcius" ;
		ti:time = "ocean_time" ;
		ti:grid = "grid" ;
		ti:location = "face" ;
		ti:coordinates = "lon_rho lat_rho ocean_time" ;
		ti:field = "interior temperature, scalar, series" ;
		ti:_FillValue = 1.e+37f ;
	float sig11(ocean_time, eta_rho, xi_rho) ;
		sig11:long_name = "internal ice stress 11 component" ;
		sig11:units = "Newton meter-1" ;
		sig11:time = "ocean_time" ;
		sig11:grid = "grid" ;
		sig11:location = "face" ;
		sig11:coordinates = "lon_rho lat_rho ocean_time" ;
		sig11:field = "ice stress 11, scalar, series" ;
		sig11:_FillValue = 1.e+37f ;
	float sig22(ocean_time, eta_rho, xi_rho) ;
		sig22:long_name = "internal ice stress 22 component" ;
		sig22:units = "Newton meter-1" ;
		sig22:time = "ocean_time" ;
		sig22:grid = "grid" ;
		sig22:location = "face" ;
		sig22:coordinates = "lon_rho lat_rho ocean_time" ;
		sig22:field = "ice stress 22, scalar, series" ;
		sig22:_FillValue = 1.e+37f ;
	float sig12(ocean_time, eta_rho, xi_rho) ;
		sig12:long_name = "internal ice stress 12 component" ;
		sig12:units = "Newton meter-1" ;
		sig12:time = "ocean_time" ;
		sig12:grid = "grid" ;
		sig12:location = "face" ;
		sig12:coordinates = "lon_rho lat_rho ocean_time" ;
		sig12:field = "ice stress 12, scalar, series" ;
		sig12:_FillValue = 1.e+37f ;
	float s0mk(ocean_time, eta_rho, xi_rho) ;
		s0mk:long_name = "salinity of molecular sub-layer under ice" ;
		s0mk:time = "ocean_time" ;
		s0mk:grid = "grid" ;
		s0mk:location = "face" ;
		s0mk:coordinates = "lon_rho lat_rho ocean_time" ;
		s0mk:field = "salinity, scalar, series" ;
		s0mk:_FillValue = 1.e+37f ;
	float t0mk(ocean_time, eta_rho, xi_rho) ;
		t0mk:long_name = "temperature of molecular sub-layer under ice" ;
		t0mk:units = "degrees Celsius" ;
		t0mk:time = "ocean_time" ;
		t0mk:grid = "grid" ;
		t0mk:location = "face" ;
		t0mk:coordinates = "lon_rho lat_rho ocean_time" ;
		t0mk:field = "temperature, scalar, series" ;
		t0mk:_FillValue = 1.e+37f ;
	float wfr(ocean_time, eta_rho, xi_rho) ;
		wfr:long_name = "rate of frazil ice growth" ;
		wfr:units = "m^3 s-1" ;
		wfr:time = "ocean_time" ;
		wfr:grid = "grid" ;
		wfr:location = "face" ;
		wfr:coordinates = "lon_rho lat_rho ocean_time" ;
		wfr:field = "freeze rate, scalar, series" ;
		wfr:_FillValue = 1.e+37f ;
	float wai(ocean_time, eta_rho, xi_rho) ;
		wai:long_name = "rate of ice melt on top" ;
		wai:units = "m^3 s-1" ;
		wai:time = "ocean_time" ;
		wai:grid = "grid" ;
		wai:location = "face" ;
		wai:coordinates = "lon_rho lat_rho ocean_time" ;
		wai:field = "freeze/melt rate, scalar, series" ;
		wai:_FillValue = 1.e+37f ;
	float wao(ocean_time, eta_rho, xi_rho) ;
		wao:long_name = "rate of ice growth in leads" ;
		wao:units = "m^3 s-1" ;
		wao:time = "ocean_time" ;
		wao:grid = "grid" ;
		wao:location = "face" ;
		wao:coordinates = "lon_rho lat_rho ocean_time" ;
		wao:field = "freeze/melt rate, scalar, series" ;
		wao:_FillValue = 1.e+37f ;
	float wio(ocean_time, eta_rho, xi_rho) ;
		wio:long_name = "rate of ice growth under ice" ;
		wio:units = "m^3 s-1" ;
		wio:time = "ocean_time" ;
		wio:grid = "grid" ;
		wio:location = "face" ;
		wio:coordinates = "lon_rho lat_rho ocean_time" ;
		wio:field = "freeze rate, scalar, series" ;
		wio:_FillValue = 1.e+37f ;
	float wro(ocean_time, eta_rho, xi_rho) ;
		wro:long_name = "rate of ice melt runoff" ;
		wro:units = "m^3 s-1" ;
		wro:time = "ocean_time" ;
		wro:grid = "grid" ;
		wro:location = "face" ;
		wro:coordinates = "lon_rho lat_rho ocean_time" ;
		wro:field = "melt runoff rate, scalar, series" ;
		wro:_FillValue = 1.e+37f ;
	float wdiv(ocean_time, eta_rho, xi_rho) ;
		wdiv:long_name = "rate of ice divergence" ;
		wdiv:units = "m^3 s-1" ;
		wdiv:time = "ocean_time" ;
		wdiv:grid = "grid" ;
		wdiv:location = "face" ;
		wdiv:coordinates = "lon_rho lat_rho ocean_time" ;
		wdiv:field = "ice divergence rate, scalar, series" ;
		wdiv:_FillValue = 1.e+37f ;

// global attributes:
		:file = "ocean_his.nc" ;
		:format = "netCDF-3 64bit offset file" ;
		:Conventions = "CF-1.4, SGRID-0.3" ;
		:type = "ROMS/TOMS history file" ;
		:title = "Experiment 1/12" ;
		:var_info = "/scratch/adriano.sutil/COAWST.V3.4/ROMS/External/varinfo.dat" ;
		:rst_file = "ocean_rst.nc" ;
		:his_file = "ocean_his.nc" ;
		:avg_file = "ocean_avg.nc" ;
		:dia_file = "ocean_dia.nc" ;
		:grd_file = "antartic_grd.nc" ;
		:ini_file = "antartic_ini.nc" ;
		:bry_file_01 = "antartic_bry.nc" ;
		:script_file = "" ;
		:NLM_LBC = "\n",
			"EDGE:        WEST   SOUTH  EAST   NORTH  \n",
			"zeta:        Cha    Clo    Cha    Cha    \n",
			"ubar:        Fla    Clo    Fla    Fla    \n",
			"vbar:        Fla    Clo    Fla    Fla    \n",
			"u:           RadNud Clo    RadNud RadNud \n",
			"v:           RadNud Clo    RadNud RadNud \n",
			"temp:        RadNud RadNud RadNud RadNud \n",
			"salt:        RadNud RadNud RadNud RadNud \n",
			"tke:         Clo    Clo    Clo    Clo    \n",
			"uice:        Gra    Clo    Gra    Gra    \n",
			"vice:        Gra    Clo    Gra    Gra    \n",
			"aice:        Gra    Clo    Gra    Gra    \n",
			"hice:        Gra    Clo    Gra    Gra    \n",
			"tisrf:       Gra    Clo    Gra    Gra    \n",
			"snow_thick:  Gra    Clo    Gra    Gra    \n",
			"apond:       Gra    Clo    Gra    Gra    \n",
			"hpond:       Gra    Clo    Gra    Gra    \n",
			"sig11:       Gra    Clo    Gra    Gra    \n",
			"sig12:       Gra    Clo    Gra    Gra    \n",
			"sig22:       Gra    Clo    Gra    Gra" ;
		:svn_url = "https:://myroms.org/svn/src" ;
		:svn_rev = "" ;
		:code_dir = "/scratch/adriano.sutil/COAWST.V3.4" ;
		:header_dir = "/home/adriano.sutil/COAWST.V3.4/Projects/antartic" ;
		:header_file = "antartic.h" ;
		:os = "Linux" ;
		:cpu = "x86_64" ;
		:compiler_system = "ftn" ;
		:compiler_command = "/opt/cray/xt-asyncpe/5.14/bin/ftn" ;
		:compiler_flags = " -O3 -" ;
		:tiling = "016x020" ;
		:history = "ROMS/TOMS, Version 3.7, Friday - October 25, 2019 -  3:17:52 PM" ;
		:ana_file = "ROMS/Functionals/ana_btflux.h, ROMS/Functionals/ana_stflux.h" ;
		:CPP_options = "antartic, ANA_BSFLUX, ANA_BTFLUX, ANA_SSFLUX, ASSUMED_SHAPE, ATM_PRESS, ATM2OCN_FLUXE AVERAGES, !BOUNDARY_A !COLLECT_ALL..., CURVGRID, DIAGNOSTICS_TS, DIAGNOSTICS_UV, DJ_GRADPS, DOUBLE_PRECISION, FRC_COUPLING, GLS_MIXING, ICE_ADVECT, ICE_BULK_FLUXES, ICE_CONVSNOW, ICE_EVP, ICE_I_O, ICE_LANDFAST, ICE_MK, ICE_MODEL, ICE_MOMENTUM, ICE_SMOLAR, ICE_STRENGTH_QUAD, ICE_THERMO, KANTHA_CLAYSON, MASKING, MCT_LIB, MIX_GEO_TS, MIX_S_UV, MPI, NONLINEAR, NONLIN_EOS, NO_LBC_ATT, N2S2_HORAVG, POWER_LAW, PROFILE, K_GSCHEME, REDUCE_ALLGATHER, RI_SPLINES, !RST_SINGLE, SALINITY, SNOWFALL, SOLAR_SOURCE, SOLVE3D, SPLINES_VDIFF, SPLINES_VVISC, TS_U3HADVECTION, TS_C4VADVECTION, TS_DIF2, UV_ADV, UV_COR, UV_U3HADVECTION, UV_C4VADVECTION, UV_LOGDRAG, UV_VIS2, VAR_RHO_2D, WRF_COUPLING" ;
}
